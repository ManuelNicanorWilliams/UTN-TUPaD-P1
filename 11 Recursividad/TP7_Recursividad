# Ejercicio 1:

def factorial(n):
    if n == 0:  # Caso base: el factorial de 0 es 1
        return 1
    else:
        return n * factorial(n-1)  # Paso recursivo

numero = int(input("Ingrese un número: "))
for i in range(1, numero+1):
    print(f"El factorial de {i} es {factorial(i)}")


# Ejercicio 2:

def fibonacci(n):
    if n == 0 or n == 1:  # Casos base
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)  # Paso recursivo

posicion = int(input("Ingrese la posición de la serie de Fibonacci quieres calcular: "))
for i in range(posicion+1):
    print(f"La posición {i} de la serie de Fibonacci es {fibonacci(i)}")


# Ejercicio 3:

def potencia(base, exponente):
    if exponente == 0:  # Caso base: cualquier número elevado a 0 es 1
        return 1
    else:
        return base * potencia(base, exponente-1)  # Paso recursivo

base = int(input("Ingrese la base de la potencia: "))
exponente = int(input("Ingrese el exponente de la potencia: "))
print(f"{base} elevado a {exponente} es {potencia(base, exponente)}")


# Ejercicio 4:

def decimal_a_binario(n):
    if n == 0:
        # Caso base: si el número es 0, se retorna una cadena vacía
        return ""
    else:
        # Paso recursivo:
        # - Divide el número entre 2 (división entera) y llama recursivamente
        # - Concatena el resto (n % 2), que es el dígito binario actual
        return decimal_a_binario(n // 2) + str(n % 2)

decimal = int(input("Ingrese un número decimal: "))


# Ejercicio 5:

def es_palindromo(palabra):
    if len(palabra) <= 1:  # Caso base: palabra de 0 o 1 letra siempre es palíndromo
        return True
    elif palabra[0] != palabra[-1]:  # Si los extremos no coinciden, no es palíndromo
        return False
    else:
        return es_palindromo(palabra[1:-1])  # Verifica la subcadena sin los extremos

palabra = input("Ingrese una palabra: ")
if es_palindromo(palabra):
    print(f"{palabra} es un palíndromo")
else:
    print(f"{palabra} no es un palíndromo")


# Ejercicio 6:

def suma_digitos(n):
    if n < 10:  # Caso base: un solo dígito
        return n
    else:
        return n % 10 + suma_digitos(n // 10)  # Extrae el último dígito y llama con el resto

numero = int(input("Ingrese un número entero: "))
suma = suma_digitos(numero)
print(f"La suma de los dígitos de {numero} es {suma}")


# Ejercicio 7:

def contar_bloques(n):
    if n == 1:  # Caso base: una sola fila necesita 1 bloque
        return 1
    else:
        return n + contar_bloques(n-1)  # Suma los bloques del nivel actual con los niveles inferiores

bloques = int(input("Ingrese el número de bloques en el nivel más bajo: "))
total_bloques = contar_bloques(bloques)
print(f"Para construir toda la pirámide necesita {total_bloques} bloques")


# Ejercicio 8:

def contar_digito(numero, digito):
    if numero == 0:  # Caso base: número agotado
        return 0
    elif numero % 10 == digito:  # Compara el último dígito con el buscado
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)

numero = int(input("Ingrese un número entero positivo: "))
digito = int(input("Ingrese un dígito entre 0 y 9: "))
veces = contar_digito(numero, digito)
print(f"El dígito {digito}, aparece {veces} veces en el número: {numero}")
